[{"id": "4PC-UB6-CUQ-OKE", "page": {"id": "4PC-UB6-CUQ-OKE", "name": "Introduction", "path": "/1.0/getting-started/introduction", "slug": "introduction", "type": "page", "yaml": {"title": "Introduction"}, "content": " HELLO WORLD THIS IS TEST DOC BY MINUKIM! HELLO WORLD THIS IS TEST DOC BY MINUKIM! HELLO WORLD THIS IS TEST DOC BY MINUKIM! HELLO WORLD THIS IS TEST DOC BY MINUKIM! HELLO WORLD THIS IS TEST DOC BY MINUKIM! ", "children": [], "collapsed": true, "isVisible": true}, "tags": [], "pageName": "Introduction", "pathName": "Getting Started > Introduction", "relativePath": "/1.0/getting-started/introduction"}, {"id": "VKH-LMO-PPZ-VQO", "page": {"id": "VKH-LMO-PPZ-VQO", "name": "Quick start", "path": "/1.0/getting-started/quick-start", "slug": "quick-start", "type": "page", "yaml": {"title": "Quick start"}, "content": " Quick start Before you can use [your-product], you'll need to get setup. Below you will find the quick start setup process. Download Download [your-product] to get the compiled CSS and JavaScript. Snippet Install the following snippet of Javascript right before the closing &lt;/body&gt; tag. &lt;!-- [your-product] --&gt;\n&lt;script type=\"text/javascript\"&gt;\n&nbsp;(function() [\n&nbsp;&nbsp;//.. your code\n&nbsp;])();\n&lt;/script&gt;\n&lt;!-- end [your-product] --&gt;\n NPM Install [your-product] in your Node.js powered apps with the npm package : npm install [your-product]@1.0.0\n ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Download", "Snippet", "NPM"], "pageName": "Quick start", "pathName": "Getting Started > Quick start", "relativePath": "/1.0/getting-started/quick-start"}, {"id": "84I-VKX-RL4-ZB6", "page": {"id": "84I-VKX-RL4-ZB6", "name": "Get help", "path": "/1.0/getting-started/get-help", "slug": "get-help", "type": "page", "yaml": {"title": "Get help"}, "content": " Getting help You can ask questions and get support whenever you need. Below are the current support channels we have available to help you.&nbsp; Instant live chat In app email support Email directly to [support@your-product.com] ", "children": [], "collapsed": false, "isVisible": true}, "tags": [], "pageName": "Get help", "pathName": "Getting Started > Get help", "relativePath": "/1.0/getting-started/get-help"}, {"id": "V4Y-WAD-SYH-3WC", "page": {"id": "V4Y-WAD-SYH-3WC", "name": "Product basics", "path": "/1.0/getting-started/product-basics", "slug": "product-basics", "type": "page", "yaml": {"title": "Product basics"}, "content": " Product basics Here is a good place to introduce some of the basic functionality a beginner needs to know when getting started with your product. Links Use it as a launch pad to the more detailed How-to's, Tutorials and Explanations within your documentation. At a glance Remember to keep it simple. Stick to high level topics, written in short form. Customer success Answer questions that guide your customers to your product's \"Aha\" moments. ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Links", "At a glance", "Customer success"], "pageName": "Product basics", "pathName": "Getting Started > Product basics", "relativePath": "/1.0/getting-started/product-basics"}, {"id": "7P4-ZSS-QVZ-HFS", "page": {"id": "7P4-ZSS-QVZ-HFS", "name": "A tutorial", "path": "/1.0/tutorials/a-tutorial", "slug": "a-tutorial", "type": "page", "yaml": {"title": "A tutorial"}, "content": " A tutorial Put yourself in the shoes of an absolute beginner to your app. They are learning oriented, with the specific mind set of instructing a newcomer exactly what to do next. You are teaching them how to do a certain task through a series of steps. First Step Second Step Third Step First step Here you explain how to do step one. The point is to get your customer started on their journey, not to get them to a final destination. Using images can help them understand otherwise complicated things. Second step How to do step two. If your customer has to do complicated things for two pages, that’s much too long. Third step Step three. Focus on concrete steps, not abstract concepts. Only include steps a user needs to take. ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["First step", "Second step", "Third step"], "pageName": "A tutorial", "pathName": "Tutorials > A tutorial", "relativePath": "/1.0/tutorials/a-tutorial"}, {"id": "79Q-PUF-BZ5-AZY", "page": {"id": "79Q-PUF-BZ5-AZY", "name": "Another tutorial", "path": "/1.0/tutorials/another-tutorial", "slug": "another-tutorial", "type": "page", "yaml": {"title": "Another tutorial"}, "content": " Another tutorial Put yourself in the shoes of an absolute beginner to your app. They are learning oriented, with the specific mind set of instructing a newcomer exactly what to do next. You are teaching them how to do a certain task through a series of steps. First Step Second Step Third Step First step Here you explain how to do step one. The point is to get your customer started on their journey, not to get them to a final destination. Second step How to do step two. If your customer has to do complicated things for two pages, that’s much too long. Third step Step three. Focus on concrete steps, not abstract concepts. Only include steps a user needs to take. Include necessary code to help&nbsp;them see the result. npm install @myorg/mypackage@latest\n ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["First step", "Second step", "Third step"], "pageName": "Another tutorial", "pathName": "Tutorials > Another tutorial", "relativePath": "/1.0/tutorials/another-tutorial"}, {"id": "MDD-PUD-ZJE-HXP", "page": {"id": "MDD-PUD-ZJE-HXP", "name": "Guide tips", "path": "/1.0/how-to-guides/guide-tips", "slug": "guide-tips", "type": "page", "yaml": {"title": "Guide tips"}, "content": " Guide Tips How-to guides help a user achieve a goal. They show a user how to solve specific or common problems they might face within your product. The best way to structure how-to guides are to take a user through the steps involved, with directions to solve an end goal. For example, how to import contacts. When you are writing how-to guides, think of a user that already knows some of the basics of your app. This is a bit different than tutorials, so be careful not to confuse to purposes and intended end user of each. Name them well The title of a how-to document should tell the user exactly what it does. Provide a series of steps How-to guides must contain a list of steps, that need to be followed in order. Focus on results How-to guides must focus on achieving a practical goal. Solve a problem A how-to guide must address a specific question or problem. Don't explain concepts A how-to guide should not explain things. Leave things out Practical usability is more valuable than completeness. ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Name them well", "Provide a series of steps", "Focus on results", "Solve a problem", "Don't explain concepts", "Leave things out"], "pageName": "Guide tips", "pathName": "How-to Guides > Guide tips", "relativePath": "/1.0/how-to-guides/guide-tips"}, {"id": "1J8-UFY-XDG-3ZJ", "page": {"id": "1J8-UFY-XDG-3ZJ", "name": "Another guide", "path": "/1.0/how-to-guides/another-guide", "slug": "another-guide", "type": "page", "yaml": {"title": "Another guide"}, "content": " Another Guide How-to guides help a user achieve a goal. They show a user how to solve specific or common problems they might face within your product. The best way to structure how-to guides are to take a user through the steps involved, with directions to solve an end goal. For example, how to import contacts. When you are writing how-to guides, think of a user that already knows some of the basics of your app. This is a bit different than tutorials, so be careful not to confuse to purposes and intended end user of each. Name them well The title of a how-to document should tell the user exactly what it does. Provide a series of steps How-to guides must contain a list of steps, that need to be followed in order. Focus on results How-to guides must focus on achieving a practical goal. Solve a problem A how-to guide must address a specific question or problem. Don't explain concepts A how-to guide should not explain things. Leave things out Practical usability is more valuable than completeness. ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Name them well", "Provide a series of steps", "Focus on results", "Solve a problem", "Don't explain concepts", "Leave things out"], "pageName": "Another guide", "pathName": "How-to Guides > Another guide", "relativePath": "/1.0/how-to-guides/another-guide"}, {"id": "GEO-DZI-15R-JUM", "page": {"id": "GEO-DZI-15R-JUM", "name": "Best guide", "path": "/1.0/how-to-guides/best-guide", "slug": "best-guide", "type": "page", "yaml": {"title": "Best guide"}, "content": " Best guide How-to guides help a user achieve a goal. They show a user how to solve specific or common problems they might face within your product. The best way to structure how-to guides are to take a user through the steps involved, with directions to solve an end goal. For example, how to import contacts. When you are writing how-to guides, think of a user that already knows some of the basics of your app. This is a bit different than tutorials, so be careful not to confuse to purposes and intended end user of each. Name them well The title of a how-to document should tell the user exactly what it does. Provide a series of steps How-to guides must contain a list of steps, that need to be followed in order. Focus on results How-to guides must focus on achieving a practical goal. Solve a problem A how-to guide must address a specific question or problem. Don't explain concepts A how-to guide should not explain things. Leave things out Practical usability is more valuable than completeness. ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Name them well", "Provide a series of steps", "Focus on results", "Solve a problem", "Don't explain concepts", "Leave things out"], "pageName": "Best guide", "pathName": "How-to Guides > Best guide", "relativePath": "/1.0/how-to-guides/best-guide"}, {"id": "A6L-E96-BT9-JFG", "page": {"id": "A6L-E96-BT9-JFG", "name": "Profile", "path": "/1.0/account/profile", "slug": "profile", "type": "page", "yaml": {"title": "Profile"}, "content": " TEST TEST TEST! ", "children": [], "collapsed": false, "isVisible": true}, "tags": [], "pageName": "Profile", "pathName": "Account > Profile", "relativePath": "/1.0/account/profile"}, {"id": "OHO-RGW-X8B-5O4", "page": {"id": "OHO-RGW-X8B-5O4", "name": "Billing", "path": "/1.0/account/billing", "slug": "billing", "type": "page", "yaml": {"title": "Billing"}, "content": " Billing It's important to be transparent about your billing policies. Tell your customers what they can expect regarding this topic. Here we will use a basic table that outlines some of the common questions customers have concerning billing. Summary Topic Policy Billing Cycle Payments are due the first day of your billing cycle Refunds Yes/No Payment Methods Visa, MasterCard, American Express, Discover Payment Currency USD only Invoice Currency USD only ", "children": [], "collapsed": false, "isVisible": true}, "tags": ["Summary"], "pageName": "Billing", "pathName": "Account > Billing", "relativePath": "/1.0/account/billing"}]